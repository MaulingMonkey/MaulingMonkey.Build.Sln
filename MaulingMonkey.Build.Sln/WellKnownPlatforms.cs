// Copyright 2017 MaulingMonkey
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace MaulingMonkey.Build.Sln {
	/// <summary>
	/// A collection of well known <seealso cref="Solution.ConfigurationPlatform.Platform"/> values.
	/// <para>Not comprehensive:  New Microsoft and Third Party SDKs will continue to be released, some under NDA.
	/// Most of these are real project platforms, <see cref="MixedPlatforms"/> being the notable exception (generated by Visual Studio for solutions only.)</para>
	/// </summary>
	public static class WellKnownPlatforms {
		/// <summary>Common platform for .NET projects targeting generic MSIL output.  Any native dependencies for such a project should be registered in the GAC for multiple architectures.</summary>
		public const string AnyCPU			= "Any CPU";
		// https://slimdx.org/docs/html/Handling_32_and_64_Bit_Targets.htm

		/// <summary>
		/// Common platform for C++ projects targeting 32-bit x86.
		/// <para>.NET projects will instead use <seealso cref="x86"/> for 32-bit x86 targets.</para>
		/// </summary>
		public const string Win32			= "Win32";

		/// <summary>
		/// Common platform for .NET projects targeting x86 (due to arch-specific native dependencies, or wanting to debug 32-bit builds on 64-bit platforms.)
		/// <para>C++ projects will isntead use <seealso cref="Win32"/> for 32-bit x86 targets.</para>
		/// </summary>
		public const string x86				= "x86";

		/// <summary>Legacy platform for C++ projects.  Only supported up to VS2010 (or more accurately, Platform Toolset v100.)</summary>
		public const string Itanium			= "Itanium";

		/// <summary>Common platform for C++ projects, and .NET projects targeting specific architectures due to arch-specific native dependencies.</summary>
		public const string x64				= "x64";

		/// <summary>Common platform for C++ projects, and .NET projects targeting specific architectures due to native dependencies.</summary>
		public const string ARM				= "ARM";

		/// <summary>
		/// Not a real Project platform, but Visual Studio will often generate this as a Solution 'platform' when adding a project with different platforms to an existing solution.
		/// <para>Speaking for myself, I generally delete or rename this platform in favor of something far better described - although this means Visual Studio will try to add it again, most likely.</para>
		/// </summary>
		public const string MixedPlatforms	= "Mixed Platforms";

		/// <summary>
		/// Platforms specific to nVidia CodeWorks for Android (also known as nVidia AndroidWorks before 1R2)
		/// <para>These platforms require the extensions to Visual Studio found at: https://developer.nvidia.com/codeworks-android </para>
		/// </summary>
		public static class NVidiaCodeworks {
			/// <summary>
			/// The default project psuedo-platform for nVidia CodeWorks projects - this appears to be able to generate binaries for multiple architectures with a single build "platform".
			/// <para>"Target Architecture" (under the "Configuration Properties" > "General" tab) will not be visible for any other platform.</para>
			/// </summary>
			public const string TegraAndroid			= "Tegra-Android";

			// Unknown use - I haven't seen this in the wild.  Possibly used for java-only projects...?  Leftover from earlier versions of the nVidia CodeWorks SDK...?  I don't know.
			public const string TegraCommon				= "Tegra-Common";

			/// <summary>64-bit ARM (ARMv8 / ARM64 ?)</summary>
			public const string AArch64AndroidNVIDIA	= "AArch64-Android-NVIDIA";

			/// <summary>32-bit ARM (ARMv7 ?)</summary>
			public const string ArmAndroidNVIDIA		= "ARM-Android-NVIDIA";

			/// <summary>(32-bit) x86</summary>
			public const string x86AndroidNVIDIA		= "x86-Android-NVIDIA";

			/// <summary>(64-bit) x86-64</summary>
			public const string x64AndroidNVIDIA		= "x64-Android-NVIDIA";
		}

		// Seen in I:\home\projects\other\crawl\crawl-ref\source\contrib\freetype\builds\wince\vc2005-ce\freetype.sln
		// TODO: Drop _Armv4{,I} postfixes?  Or do some of these SDKs have x86 variants?  Perhaps I shouldn't get clever even if they don't?
		// TODO: Group into an SDK specific sub-class ala NVidiaCodeworks?  Although I think these are all Microsoft SDKs and thus perhaps shouldn't be subgrouped...
		// TODO: Make public upon deciding naming shenannigans.
		const string PocketPc2003_Armv4						= "Pocket PC 2003 (ARMV4)";
		const string Smartphone2003_Armv4					= "Smartphone 2003 (ARMV4)";
		const string WindowsMobile5_PocketPcSdk_Armv4I		= "Windows Mobile 5.0 Pocket PC SDK (ARMV4I)";
		const string WindowsMobile5_SmartphoneSdk_Armv4I	= "Windows Mobile 5.0 Smartphone SDK (ARMV4I)";
		const string WindowsMobile6_ProfessionalSdk_Armv4I	= "Windows Mobile 6 Professional SDK (ARMV4I)";
		const string WindowsMobile6_StandardSdk_Armv4I		= "Windows Mobile 6 Standard SDK (ARMV4I)";

		public static readonly string[] All = new[] {
			AnyCPU, Win32, x86, Itanium, x86, ARM,

			MixedPlatforms,

			NVidiaCodeworks.TegraAndroid,
			NVidiaCodeworks.TegraCommon,
			NVidiaCodeworks.AArch64AndroidNVIDIA,
			NVidiaCodeworks.ArmAndroidNVIDIA,
			NVidiaCodeworks.x86AndroidNVIDIA,
			NVidiaCodeworks.x64AndroidNVIDIA,

			PocketPc2003_Armv4,
			Smartphone2003_Armv4,
			WindowsMobile5_PocketPcSdk_Armv4I,
			WindowsMobile5_SmartphoneSdk_Armv4I,
			WindowsMobile6_ProfessionalSdk_Armv4I,
			WindowsMobile6_StandardSdk_Armv4I,
		};
	}
}
